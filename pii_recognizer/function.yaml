kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: 0972dbbfd83e86970a3655774ace0c074ea617ce
  project: llm-workflow-gilads
  labels:
    author: pgw
  categories:
  - machine-learning
  - data-preparation
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: IyBDb3B5cmlnaHQgMjAxOSBJZ3VhemlvCiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKIyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiMgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiMKCmltcG9ydCBsb2dnaW5nCmltcG9ydCBvcwppbXBvcnQgcGF0aGxpYgppbXBvcnQgdGVtcGZpbGUKaW1wb3J0IHdhcm5pbmdzCmZyb20gY29sbGVjdGlvbnMuYWJjIGltcG9ydCBJdGVyYWJsZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0LCBMaXN0LCBPcHRpb25hbCwgU2V0LCBUdXBsZSwgVW5pb24KCmltcG9ydCBhbm5vdGF0ZWRfdGV4dC51dGlsIGFzIGF0X3V0aWwKaW1wb3J0IG1scnVuCmltcG9ydCBubHRrCmltcG9ydCBwcmVzaWRpb19hbmFseXplciBhcyBwYQppbXBvcnQgcHJlc2lkaW9fYW5vbnltaXplciBhcyBwcmVfYW5veW1pemVyCmZyb20gcHJlc2lkaW9fYW5vbnltaXplci5lbnRpdGllcyBpbXBvcnQgT3BlcmF0b3JDb25maWcKZnJvbSB0cWRtLmF1dG8gaW1wb3J0IHRxZG0KCnRyeToKICAgIGltcG9ydCBmbGFpciBhcyBmbApleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgIHByaW50KCJGbGFpciBpcyBub3QgaW5zdGFsbGVkIikKCiMgVGhlcmUgaXMgYSBjb25mbGljdCBiZXR3ZWVuIFJ1c3QtYmFzZWQgdG9rZW5pemVycycgcGFyYWxsZWwgcHJvY2Vzc2luZwojIGFuZCBQeXRob24ncyBmb3JrIG9wZXJhdGlvbnMgZHVyaW5nIG11bHRpcHJvY2Vzc2luZy4gVG8gYXZvaWQgdGhpcywgd2UgbmVlZAojIHRoZSBmb2xsb3dpbmcgdHdvIGxpbmVzCgpvcy5lbnZpcm9uWyJUT0tFTklaRVJTX1BBUkFMTEVMSVNNIl0gPSAiZmFsc2UiCndhcm5pbmdzLmZpbHRlcndhcm5pbmdzKCJpZ25vcmUiKQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoInBpaS1yZWNvZ25pemVyIikKCgojIEFkZCB0aGUgY29uc3RhbnQgY2xhc3NlcyBvZiBNb2RlbHMgYW5kIEVudGl0aWVzIHRvIGdvdmVybiB0aGUgd2hvbGUgcGFja2FnZQpjbGFzcyBNb2RlbHM6CiAgICBXSE9MRSA9ICJ3aG9sZSIKICAgIFBBVFRFUk4gPSAicGF0dGVybiIKICAgIFNQQUNZID0gInNwYWN5IgogICAgRkxBSVIgPSAiZmxhaXIiCgoKY2xhc3MgRW50aXRpZXM6CiAgICBDUkVESVRfQ0FSRCA9ICJDUkVESVRfQ0FSRCIKICAgIFNTTiA9ICJTU04iCiAgICBQSE9ORSA9ICJQSE9ORSIKICAgIEVNQUlMID0gIkVNQUlMIgogICAgTE9DQVRJT04gPSAiTE9DQVRJT04iCiAgICBQRVJTT04gPSAiUEVSU09OIgogICAgTlJQID0gIk5SUCIKICAgIE9SR0FOSVpBVElPTiA9ICJPUkdBTklaQVRJT04iCiAgICBEQVRFX1RJTUUgPSAiREFURV9USU1FIgogICAgR1BFID0gKCJHUEUiLCkKICAgIE1BQ19BRERSRVNTID0gIk1BQ19BRERSRVNTIgogICAgVVNfQkFOS19OVU1CRVIgPSAiVVNfQkFOS19OVU1CRVIiCiAgICBJTUVJID0gIklNRUkiCiAgICBUSVRMRSA9ICJUSVRMRSIKICAgIExJQ0VOU0VfUExBVEUgPSAiTElDRU5TRV9QTEFURSIKICAgIFVTX1BBU1NQT1JUID0gIlVTX1BBU1NQT1JUIgogICAgQ1VSUkVOQ1kgPSAiQ1VSUkVOQ1kiCiAgICBST1VUSU5HX05VTUJFUiA9ICJST1VUSU5HX05VTUJFUiIKICAgIFVTX0lUSU4gPSAiVVNfSVRJTiIKICAgIFVTX0JBTktfTlVNQkVSID0gIlVTX0JBTktfTlVNQkVSIgogICAgVVNfRFJJVkVSX0xJQ0VOU0UgPSAiVVNfRFJJVkVSX0xJQ0VOU0UiCiAgICBBR0UgPSAiQUdFIgogICAgUEFTU1dPUkQgPSAiUEFTU1dPUkQiCiAgICBTV0lGVF9DT0RFID0gIlNXSUZUX0NPREUiCgoKY2xhc3MgUGF0dGVyblJlY29nbml6ZXJGYWN0b3J5OgogICAgIiIiCiAgICBGYWN0b3J5IGZvciBjcmVhdGluZyBwYXR0ZXJuIHJlY29nbml6ZXJzLCBpdCBjYW4gYmUgZXh0ZW5kZWQgaW4gdGhlIGZ1dHVyZSB0bwogICAgYWRkIG1vcmUgcmVnZXggcGF0dGVybiBmb3IgZGlmZmVyZW50IGVudGl0aWVzLiBGb3IgdGhlIHBhdHRlcm4gcmVjb2duaXplciB0byB3b3JrLAogICAgd2UgbmVlZCBjb25zdHJ1Y3QgYSBsaXN0IG9mIHJlZ2V4IHBhdHRlcm5zIGZvciBlYWNoIGVudGl0eS4KICAgICIiIgoKICAgIFJFQ09HTklaQUJMRV9FTlRJVElFUyA9IHsKICAgICAgICAiQ1JFRElUX0NBUkQiOiBbcGEuUGF0dGVybigiQ1JFRElUX0NBUkQiLCByIlxiKD86XGRbIC1dKj8pezEzLDE2fVxiIiwgMC41KV0sCiAgICAgICAgIlNTTiI6IFtwYS5QYXR0ZXJuKCJTU04iLCByIlxiXGR7M30tP1xkezJ9LT9cZHs0fVxiIiwgMC41KV0sCiAgICAgICAgIlBIT05FIjogW3BhLlBhdHRlcm4oIlBIT05FIiwgciJcKD9cZHszfVwpP1stLlxzXT9cZHszfVstLlxzXT9cZHs0fSIsIDAuNSldLAogICAgICAgICJFTUFJTCI6IFtwYS5QYXR0ZXJuKCJFTUFJTCIsIHIiXFMrQFxTKyIsIDAuNSldLAogICAgfQoKICAgICMgY3JlYXRlIGEgbGlzdCBvZiBwYXR0ZXJuIHJlY29nbml6ZXJzCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBfY3JlYXRlX3BhdHRlcm5fcmVjb2duaXplcihjbHMpOgogICAgICAgICIiIgogICAgICAgIEZvciBlYWNoIGVudGl0eSwgY3JlYXRlIGEgbGlzdCBvZiBwYXR0ZXJucyB0byByZWNvZ25pemUgaXQKCiAgICAgICAgOnBhcmFtIGNsczogUGF0dGVyblJlY29nbml6ZXJGYWN0b3J5IGNsYXNzCgogICAgICAgIDpyZXR1cm5zOiBMaXN0IG9mIHBhdHRlcm4gcmVjb2duaXplcnMKICAgICAgICAiIiIKCiAgICAgICAgIyBFbnRpdGllcyB0byByZWNvZ25pemUgYW5kIHRoZWlyIHJlZ2V4IHBhdHRlcm5zCgogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgIHBhLlBhdHRlcm5SZWNvZ25pemVyKHN1cHBvcnRlZF9lbnRpdHk9ZW50aXR5LCBwYXR0ZXJucz1wYXR0ZXJuKQogICAgICAgICAgICBmb3IgZW50aXR5LCBwYXR0ZXJuIGluIGNscy5SRUNPR05JWkFCTEVfRU5USVRJRVMuaXRlbXMoKQogICAgICAgIF0KCgpjbGFzcyBDdXN0b21TcGFjeVJlY29nbml6ZXIocGEuTG9jYWxSZWNvZ25pemVyKToKICAgICIiIgogICAgQ3VzdG9tIFNwYWN5IFJlY29nbml6ZXIgZnJvbSBQcmVzaWRpbyBBbmFseXplciB0cmFpbmVkIG9uIFByaXZ5IGRhdGEuCiAgICBUaGUgcHJpdnkgZGF0YSBpcyBnZW5lcmF0ZWQgdXNpbmcgdGhpcyBodHRwczovL2dpdGh1Yi5jb20vcGl4aWUtaW8vcGl4aWUvdHJlZS9tYWluL3NyYy9kYXRhZ2VuL3BpaS9wcml2eQogICAgSXQgY2FuIGJlIHVzZWQgdG8gcmVjb2duaXplIGN1c3RvbSBlbnRpdGllcywgU2luY2Ugd2Ugd2FudCB0byB1c2UgUHJlc2lkaW8ncyBSZWdpc3RyaWVzIHRvIGdlbmVyYXRlIEFuYWx5emVyRW5naW5lLAogICAgaXQgaW5oZXJpdHMgZnJvbSBQcmVzaWRpbyBBbmFseXplcidzIExvY2FsUmVjb2duaXplciBjbGFzcy4KICAgICIiIgoKICAgICMgRW50aXRpZXMgdG8gcmVjb2duaXplCgogICAgUkVDT0dOSVpBQkxFX0VOVElUSUVTID0gewogICAgICAgICJMT0NBVElPTiIsCiAgICAgICAgIlBFUlNPTiIsCiAgICAgICAgIk5SUCIsCiAgICAgICAgIk9SR0FOSVpBVElPTiIsCiAgICAgICAgIkRBVEVfVElNRSIsCiAgICB9CgogICAgIyBEZWZhdWx0IGV4cGxhbmF0aW9uIGZvciB0aGlzIHJlY29nbml6ZXIKCiAgICBfREVGQVVMVF9FWFBMQU5BVElPTiA9ICgKICAgICAgICAiSWRlbnRpZmllZCBhcyB7fSBieSBTcGFjeSdzIE5hbWVkIEVudGl0eSBSZWNvZ25pdGlvbiAoUHJpdnktdHJhaW5lZCkiCiAgICApCgogICAgIyBMYWJlbCBncm91cHMgdG8gY2hlY2sKCiAgICBfREVGQVVMVF9DSEVDS19MQUJFTF9HUk9VUFMgPSBbCiAgICAgICAgKHsiTE9DQVRJT04ifSwgeyJMT0MiLCAiTE9DQVRJT04iLCAiU1RSRUVUX0FERFJFU1MiLCAiQ09PUkRJTkFURSJ9KSwKICAgICAgICAoeyJQRVJTT04ifSwgeyJQRVIiLCAiUEVSU09OIn0pLAogICAgICAgICh7Ik5SUCJ9LCB7Ik5PUlAiLCAiTlJQIn0pLAogICAgICAgICh7Ik9SR0FOSVpBVElPTiJ9LCB7Ik9SRyJ9KSwKICAgICAgICAoeyJEQVRFX1RJTUUifSwgeyJEQVRFX1RJTUUifSksCiAgICBdCgogICAgIyBwcmV0cmFpbmVkIG1vZGVsIGZvciB0aGlzIHJlY29nbml6ZXIKCiAgICBfREVGQVVMVF9NT0RFTF9MQU5HVUFHRVMgPSB7CiAgICAgICAgImVuIjogImJla2kvZW5fc3BhY3lfcGlpX2Rpc3RpbGJlcnQiLAogICAgfQoKICAgIF9ERUZBVUxUX1BSRVNJRElPX0VRVUlWQUxFTkNFUyA9IHsKICAgICAgICAiUEVSIjogIlBFUlNPTiIsCiAgICAgICAgIkxPQyI6ICJMT0NBVElPTiIsCiAgICAgICAgIk9SRyI6ICJPUkdBTklaQVRJT04iLAogICAgICAgICJOUk9QIjogIk5SUCIsCiAgICAgICAgIkRBVEVfVElNRSI6ICJEQVRFX1RJTUUiLAogICAgfQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIHN1cHBvcnRlZF9sYW5ndWFnZTogc3RyID0gImVuIiwKICAgICAgICBzdXBwb3J0ZWRfZW50aXRpZXM6IExpc3Rbc3RyXSA9IE5vbmUsCiAgICAgICAgY2hlY2tfbGFiZWxfZ3JvdXBzOiBUdXBsZVtTZXQsIFNldF0gPSBOb25lLAogICAgICAgIGNvbnRleHQ6IExpc3Rbc3RyXSA9IE5vbmUsCiAgICAgICAgbmVyX3N0cmVuZ3RoOiBmbG9hdCA9IDEsCiAgICApOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemUgU3BhY3kgUmVjb2duaXplci4KCiAgICAgICAgOnBhcmFtIHN1cHBvcnRlZF9sYW5ndWFnZTogTGFuZ3VhZ2UgdG8gdXNlLCBkZWZhdWx0IGlzIEVuZ2xpc2gKICAgICAgICA6cGFyYW0gc3VwcG9ydGVkX2VudGl0aWVzOiBFbnRpdGllcyB0byB1c2UgZm9yIHJlY29nbml0aW9uCiAgICAgICAgOnBhcmFtIGNoZWNrX2xhYmVsX2dyb3VwczogTGFiZWwgZ3JvdXBzIHRvIGNoZWNrIGZvciB0aGUgZW50aXRpZXMKICAgICAgICA6cGFyYW0gY29udGV4dDogICAgICAgICAgICBDb250ZXh0IHRvIHVzZSBpZiBhbnkKICAgICAgICA6cGFyYW0gbmVyX3N0cmVuZ3RoOiAgICAgICBEZWZhdWx0IGNvbmZpZGVuY2UgZm9yIE5FUiBwcmVkaWN0aW9uCgogICAgICAgIDpyZXR1cm5zOiBTcGFjeVJlY29nbml6ZXIgb2JqZWN0CiAgICAgICAgIiIiCgogICAgICAgICMgRGVmYXVsdCBjb25maWRlbmNlIGZvciBORVIgcHJlZGljdGlvbgogICAgICAgIHNlbGYubmVyX3N0cmVuZ3RoID0gbmVyX3N0cmVuZ3RoCgogICAgICAgIHNlbGYuY2hlY2tfbGFiZWxfZ3JvdXBzID0gY2hlY2tfbGFiZWxfZ3JvdXBzIG9yIHNlbGYuX0RFRkFVTFRfQ0hFQ0tfTEFCRUxfR1JPVVBTCiAgICAgICAgc3VwcG9ydGVkX2VudGl0aWVzID0gc3VwcG9ydGVkX2VudGl0aWVzIG9yIHNlbGYuUkVDT0dOSVpBQkxFX0VOVElUSUVTCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygKICAgICAgICAgICAgc3VwcG9ydGVkX2VudGl0aWVzPXN1cHBvcnRlZF9lbnRpdGllcywKICAgICAgICAgICAgc3VwcG9ydGVkX2xhbmd1YWdlPXN1cHBvcnRlZF9sYW5ndWFnZSwKICAgICAgICApCgogICAgIyBnZXQgdGhlIHByZXNpZGlvIGV4cGxhbmF0aW9uIGZvciB0aGUgcmVzdWx0CgogICAgZGVmIF9idWlsZF9zcGFjeV9leHBsYW5hdGlvbigKICAgICAgICBzZWxmLCBvcmlnaW5hbF9zY29yZTogZmxvYXQsIGV4cGxhbmF0aW9uOiBzdHIKICAgICkgLT4gcGEuQW5hbHlzaXNFeHBsYW5hdGlvbjoKICAgICAgICAiIiIKICAgICAgICBDcmVhdGUgZXhwbGFuYXRpb24gZm9yIHdoeSB0aGlzIHJlc3VsdCB3YXMgZGV0ZWN0ZWQuCgogICAgICAgIDpwYXJhbSBvcmlnaW5hbF9zY29yZTogU2NvcmUgZ2l2ZW4gYnkgdGhpcyByZWNvZ25pemVyCiAgICAgICAgOnBhcmFtIGV4cGxhbmF0aW9uOiAgICBFeHBsYW5hdGlvbiBzdHJpbmcKCiAgICAgICAgOnJldHVybnM6IFByZXNpZGlvIEFuYWx5c2lzRXhwbGFuYXRpb24gb2JqZWN0CiAgICAgICAgIiIiCiAgICAgICAgZXhwbGFuYXRpb24gPSBwYS5BbmFseXNpc0V4cGxhbmF0aW9uKAogICAgICAgICAgICByZWNvZ25pemVyPXNlbGYuX19jbGFzc19fLl9fbmFtZV9fLAogICAgICAgICAgICBvcmlnaW5hbF9zY29yZT1vcmlnaW5hbF9zY29yZSwKICAgICAgICAgICAgdGV4dHVhbF9leHBsYW5hdGlvbj1leHBsYW5hdGlvbiwKICAgICAgICApCiAgICAgICAgcmV0dXJuIGV4cGxhbmF0aW9uCgogICAgIyBtYWluIG1ldGhvZCBmb3IgdGhlIHJlY29nbml6ZXIKICAgIGRlZiBhbmFseXplKHNlbGYsIHRleHQ6IHN0ciwgZW50aXRpZXM6IExpc3Rbc3RyXSwgbmxwX2FydGlmYWN0cz1Ob25lKTogICMgbm9xYSBEMTAyCiAgICAgICAgIiIiCiAgICAgICAgQW5hbHl6ZSB0ZXh0IHVzaW5nIFNwYWN5LgoKICAgICAgICA6cGFyYW0gdGV4dDogICAgICAgICAgVGV4dCB0byBhbmFseXplCiAgICAgICAgOnBhcmFtIGVudGl0aWVzOiAgICAgIEVudGl0aWVzIHRvIGFuYWx5emUKICAgICAgICA6cGFyYW0gbmxwX2FydGlmYWN0czogTkxQIGFydGlmYWN0cyB0byB1c2UKCiAgICAgICAgOnJldHVybnM6IExpc3Qgb2YgUHJlc2lkaW8gUmVjb2duaXplclJlc3VsdCBvYmplY3RzCiAgICAgICAgIiIiCiAgICAgICAgcmVzdWx0cyA9IFtdCiAgICAgICAgaWYgbm90IG5scF9hcnRpZmFjdHM6CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJTa2lwcGluZyBTcGFDeSwgbmxwIGFydGlmYWN0cyBub3QgcHJvdmlkZWQuLi4iKQogICAgICAgICAgICByZXR1cm4gcmVzdWx0cwoKICAgICAgICBuZXJfZW50aXRpZXMgPSBubHBfYXJ0aWZhY3RzLmVudGl0aWVzCgogICAgICAgICMgcmVjb2duaXplIHRoZSBzdXBwb3J0ZWQgZW50aXRpZXMKICAgICAgICBmb3IgZW50aXR5IGluIGVudGl0aWVzOgogICAgICAgICAgICBpZiBlbnRpdHkgbm90IGluIHNlbGYuc3VwcG9ydGVkX2VudGl0aWVzOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgZm9yIGVudCBpbiBuZXJfZW50aXRpZXM6CiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5fX2NoZWNrX2xhYmVsKGVudGl0eSwgZW50LmxhYmVsXywgc2VsZi5jaGVja19sYWJlbF9ncm91cHMpOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICAgICAgIyBzdHJpbmcgb2YgdGhlIGV4cGxhbmF0aW9uIHNheWluZyB0aGUgZW50aXR5IGlzIHJlY29nbml6ZWQgYnkgc3BhY3kKICAgICAgICAgICAgICAgIHRleHR1YWxfZXhwbGFuYXRpb24gPSBzZWxmLl9ERUZBVUxUX0VYUExBTkFUSU9OLmZvcm1hdChlbnQubGFiZWxfKQogICAgICAgICAgICAgICAgZXhwbGFuYXRpb24gPSBzZWxmLl9idWlsZF9zcGFjeV9leHBsYW5hdGlvbigKICAgICAgICAgICAgICAgICAgICBzZWxmLm5lcl9zdHJlbmd0aCwgdGV4dHVhbF9leHBsYW5hdGlvbgogICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICMgY3JlYXRlIHRoZSBzdGFuZGFyZCByZXN1bHQgd2l0aCB0aGUgZW50aXR5LCBzdGFydCwgZW5kLCBzY29yZSwgYW5kIGV4cGxhbmF0aW9uCiAgICAgICAgICAgICAgICBzcGFjeV9yZXN1bHQgPSBwYS5SZWNvZ25pemVyUmVzdWx0KAogICAgICAgICAgICAgICAgICAgIGVudGl0eV90eXBlPWVudGl0eSwKICAgICAgICAgICAgICAgICAgICBzdGFydD1lbnQuc3RhcnRfY2hhciwKICAgICAgICAgICAgICAgICAgICBlbmQ9ZW50LmVuZF9jaGFyLAogICAgICAgICAgICAgICAgICAgIHNjb3JlPXNlbGYubmVyX3N0cmVuZ3RoLAogICAgICAgICAgICAgICAgICAgIGFuYWx5c2lzX2V4cGxhbmF0aW9uPWV4cGxhbmF0aW9uLAogICAgICAgICAgICAgICAgICAgIHJlY29nbml0aW9uX21ldGFkYXRhPXsKICAgICAgICAgICAgICAgICAgICAgICAgcGEuUmVjb2duaXplclJlc3VsdC5SRUNPR05JWkVSX05BTUVfS0VZOiBzZWxmLm5hbWUKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgcmVzdWx0cy5hcHBlbmQoc3BhY3lfcmVzdWx0KQoKICAgICAgICByZXR1cm4gcmVzdWx0cwoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfX2NoZWNrX2xhYmVsKAogICAgICAgIGVudGl0eTogc3RyLCBsYWJlbDogc3RyLCBjaGVja19sYWJlbF9ncm91cHM6IFR1cGxlW1NldCwgU2V0XQogICAgKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIENoZWNrIGlmIHRoZSBsYWJlbCBpcyBpbiB0aGUgbGFiZWwgZ3JvdXAuCgogICAgICAgIDpwYXJhbSBlbnRpdHk6ICAgICAgICAgICAgIEVudGl0eSB0byBjaGVjawogICAgICAgIDpwYXJhbSBsYWJlbDogICAgICAgICAgICAgIExhYmVsIHRvIGNoZWNrCiAgICAgICAgOnBhcmFtIGNoZWNrX2xhYmVsX2dyb3VwczogTGFiZWwgZ3JvdXBzIHRvIGNoZWNrCgogICAgICAgIDpyZXR1cm5zOiBUcnVlIGlmIHRoZSBsYWJlbCBpcyBpbiB0aGUgbGFiZWwgZ3JvdXAsIEZhbHNlIG90aGVyd2lzZQogICAgICAgICIiIgogICAgICAgIHJldHVybiBhbnkoCiAgICAgICAgICAgIGVudGl0eSBpbiBlZ3JwIGFuZCBsYWJlbCBpbiBsZ3JwIGZvciBlZ3JwLCBsZ3JwIGluIGNoZWNrX2xhYmVsX2dyb3VwcwogICAgICAgICkKCgojIENsYXNzIHRvIHVzZSBGbGFpciB3aXRoIFByZXNpZGlvIGFzIGFuIGV4dGVybmFsIHJlY29nbml6ZXIuCmNsYXNzIEZsYWlyUmVjb2duaXplcihwYS5FbnRpdHlSZWNvZ25pemVyKToKICAgICIiIgogICAgV3JhcHBlciBmb3IgYSBmbGFpciBtb2RlbCwgaWYgbmVlZGVkIHRvIGJlIHVzZWQgd2l0aGluIFByZXNpZGlvIEFuYWx5emVyLgogICAgVGhpcyBpcyB0byBtYWtlIHN1cmUgdGhlIHJlY29nbml6ZXIgY2FuIGJlIHJlZ2lzdGVyZWQgd2l0aCBQcmVzaWRpbyByZWdpc3RyeS4KICAgICIiIgoKICAgIFJFQ09HTklaQUJMRV9FTlRJVElFUyA9IHsKICAgICAgICAiTE9DQVRJT04iLAogICAgICAgICJQRVJTT04iLAogICAgICAgICJOUlAiLAogICAgICAgICJHUEUiLAogICAgICAgICJPUkdBTklaQVRJT04iLAogICAgICAgICJNQUNfQUREUkVTUyIsCiAgICAgICAgIlVTX0JBTktfTlVNQkVSIiwKICAgICAgICAiSU1FSSIsCiAgICAgICAgIlRJVExFIiwKICAgICAgICAiTElDRU5TRV9QTEFURSIsCiAgICAgICAgIlVTX1BBU1NQT1JUIiwKICAgICAgICAiQ1VSUkVOQ1kiLAogICAgICAgICJST1VUSU5HX05VTUJFUiIsCiAgICAgICAgIlVTX0lUSU4iLAogICAgICAgICJVU19CQU5LX05VTUJFUiIsCiAgICAgICAgIlVTX0RSSVZFUl9MSUNFTlNFIiwKICAgICAgICAiQUdFIiwKICAgICAgICAiUEFTU1dPUkQiLAogICAgICAgICJTV0lGVF9DT0RFIiwKICAgIH0KCiAgICAjIFRoaXMgaXMgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIGV4cGxhbmF0aW9uIGZvciB0aGUgcmVzdWx0CgogICAgX0RFRkFVTFRfRVhQTEFOQVRJT04gPSAiSWRlbnRpZmllZCBhcyB7fSBieSBGbGFpcidzIE5hbWVkIEVudGl0eSBSZWNvZ25pdGlvbiIKCiAgICBfREVGQVVMVF9DSEVDS19MQUJFTF9HUk9VUFMgPSBbCiAgICAgICAgKHsiTE9DQVRJT04ifSwgeyJMT0MiLCAiTE9DQVRJT04iLCAiU1RSRUVUX0FERFJFU1MiLCAiQ09PUkRJTkFURSJ9KSwKICAgICAgICAoeyJQRVJTT04ifSwgeyJQRVIiLCAiUEVSU09OIn0pLAogICAgICAgICh7Ik5SUCJ9LCB7Ik5PUlAiLCAiTlJQIn0pLAogICAgICAgICh7IkdQRSJ9LCB7IkdQRSJ9KSwKICAgICAgICAoeyJPUkdBTklaQVRJT04ifSwgeyJPUkcifSksCiAgICAgICAgKHsiTUFDX0FERFJFU1MifSwgeyJNQUNfQUREUkVTUyJ9KSwKICAgICAgICAoeyJVU19CQU5LX05VTUJFUiJ9LCB7IlVTX0JBTktfTlVNQkVSIn0pLAogICAgICAgICh7IklNRUkifSwgeyJJTUVJIn0pLAogICAgICAgICh7IlRJVExFIn0sIHsiVElUTEUifSksCiAgICAgICAgKHsiTElDRU5TRV9QTEFURSJ9LCB7IkxJQ0VOU0VfUExBVEUifSksCiAgICAgICAgKHsiVVNfUEFTU1BPUlQifSwgeyJVU19QQVNTUE9SVCJ9KSwKICAgICAgICAoeyJDVVJSRU5DWSJ9LCB7IkNVUlJFTkNZIn0pLAogICAgICAgICh7IlJPVVRJTkdfTlVNQkVSIn0sIHsiUk9VVElOR19OVU1CRVIifSksCiAgICAgICAgKHsiQUdFIn0sIHsiQUdFIn0pLAogICAgICAgICh7IkNVUlJFTkNZIn0sIHsiQ1VSUkVOQ1kifSksCiAgICAgICAgKHsiU1dJRlRfQ09ERSJ9LCB7IlNXSUZUX0NPREUifSksCiAgICAgICAgKHsiVVNfSVRJTiJ9LCB7IlVTX0lUSU4ifSksCiAgICAgICAgKHsiVVNfQkFOS19OVU1CRVIifSwgeyJVU19CQU5LX05VTUJFUiJ9KSwKICAgICAgICAoeyJVU19EUklWRVJfTElDRU5TRSJ9LCB7IlVTX0RSSVZFUl9MSUNFTlNFIn0pLAogICAgXQoKICAgIF9ERUZBVUxUX01PREVMX0xBTkdVQUdFUyA9IHsKICAgICAgICAiZW4iOiAiYmVraS9mbGFpci1waWktZGlzdGlsYmVydCIsCiAgICB9CgogICAgX0RFRkFVTFRfUFJFU0lESU9fRVFVSVZBTEVOQ0VTID0gewogICAgICAgICJQRVIiOiAiUEVSU09OIiwKICAgICAgICAiTE9DIjogIkxPQ0FUSU9OIiwKICAgICAgICAiT1JHIjogIk9SR0FOSVpBVElPTiIsCiAgICAgICAgIk5ST1AiOiAiTlJQIiwKICAgICAgICAiVVJMIjogIlVSTCIsCiAgICAgICAgIlVTX0lUSU4iOiAiVVNfSVRJTiIsCiAgICAgICAgIlVTX1BBU1NQT1JUIjogIlVTX1BBU1NQT1JUIiwKICAgICAgICAiSUJBTl9DT0RFIjogIklCQU5fQ09ERSIsCiAgICAgICAgIklQX0FERFJFU1MiOiAiSVBfQUREUkVTUyIsCiAgICAgICAgIkVNQUlMX0FERFJFU1MiOiAiRU1BSUwiLAogICAgICAgICJVU19EUklWRVJfTElDRU5TRSI6ICJVU19EUklWRVJfTElDRU5TRSIsCiAgICAgICAgIlVTX0JBTktfTlVNQkVSIjogIlVTX0JBTktfTlVNQkVSIiwKICAgIH0KCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBzdXBwb3J0ZWRfbGFuZ3VhZ2U6IHN0ciA9ICJlbiIsCiAgICAgICAgc3VwcG9ydGVkX2VudGl0aWVzOiBMaXN0W3N0cl0gPSBOb25lLAogICAgICAgIGNoZWNrX2xhYmVsX2dyb3VwczogVHVwbGVbU2V0LCBTZXRdID0gTm9uZSwKICAgICk6CiAgICAgICAgIiIiCiAgICAgICAgSW5pdGlhbGl6ZSB0aGUgRmxhaXJSZWNvZ25pemVyLgoKICAgICAgICA6cGFyYW0gc3VwcG9ydGVkX2xhbmd1YWdlOiBMYW5ndWFnZSB0byB1c2UKICAgICAgICA6cGFyYW0gc3VwcG9ydGVkX2VudGl0aWVzOiBFbnRpdGllcyB0byB1c2UKICAgICAgICA6cGFyYW0gY2hlY2tfbGFiZWxfZ3JvdXBzOiBMYWJlbCBncm91cHMgdG8gY2hlY2sKCiAgICAgICAgOnJldHVybnM6IEZsYWlyUmVjb2duaXplciBvYmplY3QKCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5jaGVja19sYWJlbF9ncm91cHMgPSBjaGVja19sYWJlbF9ncm91cHMgb3Igc2VsZi5fREVGQVVMVF9DSEVDS19MQUJFTF9HUk9VUFMKCiAgICAgICAgc3VwcG9ydGVkX2VudGl0aWVzID0gc3VwcG9ydGVkX2VudGl0aWVzIG9yIHNlbGYuUkVDT0dOSVpBQkxFX0VOVElUSUVTCiAgICAgICAgc2VsZi5tb2RlbCA9IGZsLm1vZGVscy5TZXF1ZW5jZVRhZ2dlci5sb2FkKAogICAgICAgICAgICBzZWxmLl9ERUZBVUxUX01PREVMX0xBTkdVQUdFUy5nZXQoc3VwcG9ydGVkX2xhbmd1YWdlKQogICAgICAgICkKCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygKICAgICAgICAgICAgc3VwcG9ydGVkX2VudGl0aWVzPXN1cHBvcnRlZF9lbnRpdGllcywKICAgICAgICAgICAgc3VwcG9ydGVkX2xhbmd1YWdlPXN1cHBvcnRlZF9sYW5ndWFnZSwKICAgICAgICAgICAgbmFtZT0iRmxhaXIgQW5hbHl0aWNzIiwKICAgICAgICApCgogICAgIyBtYWluIG1ldGhvZCBmb3IgdGhlIHJlY29nbml6ZXIKICAgIGRlZiBhbmFseXplKAogICAgICAgIHNlbGYsCiAgICAgICAgdGV4dDogc3RyLAogICAgICAgIGVudGl0aWVzOiBMaXN0W3N0cl0sCiAgICAgICAgbmxwX2FydGlmYWN0czogcGEubmxwX2VuZ2luZS5ObHBBcnRpZmFjdHMgPSBOb25lLAogICAgKSAtPiBMaXN0W3BhLlJlY29nbml6ZXJSZXN1bHRdOgogICAgICAgICIiIgogICAgICAgIEFuYWx5emUgdGV4dCBhbmQgcmV0dXJuIHRoZSByZXN1bHRzLgoKICAgICAgICA6cGFyYW0gdGV4dDogICAgICAgICAgVGhlIHRleHQgZm9yIGFuYWx5c2lzLgogICAgICAgIDpwYXJhbSBlbnRpdGllczogICAgICBUaGUgbGlzdCBvZiBlbnRpdGllcyB0byByZWNvZ25pemUuCiAgICAgICAgOnBhcmFtIG5scF9hcnRpZmFjdHM6IE5vdCB1c2VkIGJ5IHRoaXMgcmVjb2duaXplciBidXQgbmVlZGVkIGZvciB0aGUgaW50ZXJmYWNlLgogICAgICAgIDpwYXJhbSBsYW5ndWFnZTogICAgICBUZXh0IGxhbmd1YWdlLiBTdXBwb3J0ZWQgbGFuZ3VhZ2VzIGluIE1PREVMX0xBTkdVQUdFUwoKICAgICAgICA6cmV0dXJuczogVGhlIGxpc3Qgb2YgUHJlc2lkaW8gUmVjb2duaXplclJlc3VsdCBjb25zdHJ1Y3RlZCBmcm9tIHRoZSByZWNvZ25pemVkIEZsYWlyIGRldGVjdGlvbnMuCiAgICAgICAgIiIiCgogICAgICAgIHJlc3VsdHMgPSBbXQoKICAgICAgICBzZW50ZW5jZXMgPSBmbC5kYXRhLlNlbnRlbmNlKHRleHQpCiAgICAgICAgc2VsZi5tb2RlbC5wcmVkaWN0KHNlbnRlbmNlcykKCiAgICAgICAgIyBJZiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgbGlzdCBvZiBlbnRpdGllcywgd2Ugd2lsbCBsb29rIGZvciBhbGwgb2YgaXQuCiAgICAgICAgaWYgbm90IGVudGl0aWVzOgogICAgICAgICAgICBlbnRpdGllcyA9IHNlbGYuc3VwcG9ydGVkX2VudGl0aWVzCgogICAgICAgICMgR28gb3ZlciB0aGUgZW50aXRpZXMgYW5kIGNoZWNrIGlmIHRoZXkgYXJlIGluIHRoZSBzdXBwb3J0ZWQgZW50aXRpZXMgbGlzdC4KICAgICAgICBmb3IgZW50aXR5IGluIGVudGl0aWVzOgogICAgICAgICAgICBpZiBlbnRpdHkgbm90IGluIHNlbGYuc3VwcG9ydGVkX2VudGl0aWVzOgogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgICMgR28gb3ZlciB0aGUgc2VudGVuY2VzIGFuZCBjaGVjayBpZiB0aGUgZW50aXR5IGlzIGluIHRoZSBzZW50ZW5jZS4KICAgICAgICAgICAgZm9yIGVudCBpbiBzZW50ZW5jZXMuZ2V0X3NwYW5zKCJuZXIiKToKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9fY2hlY2tfbGFiZWwoCiAgICAgICAgICAgICAgICAgICAgZW50aXR5LCBlbnQubGFiZWxzWzBdLnZhbHVlLCBzZWxmLmNoZWNrX2xhYmVsX2dyb3VwcwogICAgICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgICAgICMgSWYgdGhlIGVudGl0eSBpcyBpbiB0aGUgc2VudGVuY2UsIHdlIHdpbGwgYWRkIGl0IHRvIHRoZSByZXN1bHRzLgogICAgICAgICAgICAgICAgdGV4dHVhbF9leHBsYW5hdGlvbiA9IHNlbGYuX0RFRkFVTFRfRVhQTEFOQVRJT04uZm9ybWF0KAogICAgICAgICAgICAgICAgICAgIGVudC5sYWJlbHNbMF0udmFsdWUKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAjIEJ1aWxkIHRoZSBleHBsYW5hdGlvbiBmb3IgdGhlIHJlc3VsdAogICAgICAgICAgICAgICAgZXhwbGFuYXRpb24gPSBzZWxmLl9idWlsZF9mbGFpcl9leHBsYW5hdGlvbigKICAgICAgICAgICAgICAgICAgICByb3VuZChlbnQuc2NvcmUsIDIpLCB0ZXh0dWFsX2V4cGxhbmF0aW9uCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgZmxhaXJfcmVzdWx0ID0gc2VsZi5fY29udmVydF90b19yZWNvZ25pemVyX3Jlc3VsdChlbnQsIGV4cGxhbmF0aW9uKQoKICAgICAgICAgICAgICAgIHJlc3VsdHMuYXBwZW5kKGZsYWlyX3Jlc3VsdCkKCiAgICAgICAgcmV0dXJuIHJlc3VsdHMKCiAgICBkZWYgX2NvbnZlcnRfdG9fcmVjb2duaXplcl9yZXN1bHQoCiAgICAgICAgc2VsZiwgZW50aXR5OiBmbC5kYXRhLlNwYW4sIGV4cGxhbmF0aW9uOiBzdHIKICAgICkgLT4gcGEuUmVjb2duaXplclJlc3VsdDoKICAgICAgICAiIiIKICAgICAgICBDb252ZXJ0IEZsYWlyIHJlc3VsdCB0byBQcmVzaWRpbyBSZWNvZ25pemVyUmVzdWx0LgoKICAgICAgICA6cGFyYW0gZW50aXR5OiAgICAgIEZsYWlyIGVudGl0eSBvZiBTcGFuCiAgICAgICAgOnBhcmFtIGV4cGxhbmF0aW9uOiBQcmVzaWRpbyBBbmFseXNpc0V4cGxhbmF0aW9uCgogICAgICAgIDpyZXR1cm5zOiBQcmVzaWRpbyBSZWNvZ25pemVyUmVzdWx0CiAgICAgICAgIiIiCgogICAgICAgICMgQ29udmVydCB0aGUgZW50aXR5IHR5cGUgdG8gUHJlc2lkaW8gZW50aXR5IHR5cGUKICAgICAgICBlbnRpdHlfdHlwZSA9IHNlbGYuX0RFRkFVTFRfUFJFU0lESU9fRVFVSVZBTEVOQ0VTLmdldChlbnRpdHkudGFnLCBlbnRpdHkudGFnKQoKICAgICAgICAjIENvbnZlcnQgdGhlIHNjb3JlIHRvIFByZXNpZGlvIHNjb3JlCiAgICAgICAgZmxhaXJfc2NvcmUgPSByb3VuZChlbnRpdHkuc2NvcmUsIDIpCgogICAgICAgICMgQ3JlYXRlIHRoZSBQcmVzaWRpbyBSZWNvZ25pemVyUmVzdWx0IGZyb20gdGhlIEZsYWlyIGVudGl0eQogICAgICAgIGZsYWlyX3Jlc3VsdHMgPSBwYS5SZWNvZ25pemVyUmVzdWx0KAogICAgICAgICAgICBlbnRpdHlfdHlwZT1lbnRpdHlfdHlwZSwKICAgICAgICAgICAgc3RhcnQ9ZW50aXR5LnN0YXJ0X3Bvc2l0aW9uLAogICAgICAgICAgICBlbmQ9ZW50aXR5LmVuZF9wb3NpdGlvbiwKICAgICAgICAgICAgc2NvcmU9ZmxhaXJfc2NvcmUsCiAgICAgICAgICAgIGFuYWx5c2lzX2V4cGxhbmF0aW9uPWV4cGxhbmF0aW9uLAogICAgICAgICkKCiAgICAgICAgcmV0dXJuIGZsYWlyX3Jlc3VsdHMKCiAgICBkZWYgX2J1aWxkX2ZsYWlyX2V4cGxhbmF0aW9uKAogICAgICAgIHNlbGYsIG9yaWdpbmFsX3Njb3JlOiBmbG9hdCwgZXhwbGFuYXRpb246IHN0cgogICAgKSAtPiBwYS5BbmFseXNpc0V4cGxhbmF0aW9uOgogICAgICAgICIiIgogICAgICAgIENyZWF0ZSBleHBsYW5hdGlvbiBmb3Igd2h5IHRoaXMgcmVzdWx0IHdhcyBkZXRlY3RlZC4KCiAgICAgICAgOnBhcmFtIG9yaWdpbmFsX3Njb3JlOiBTY29yZSBnaXZlbiBieSB0aGlzIHJlY29nbml6ZXIKICAgICAgICA6cGFyYW0gZXhwbGFuYXRpb246ICAgIEV4cGxhbmF0aW9uIHN0cmluZwoKICAgICAgICA6cmV0dXJuczogUHJlc2lkaW8gQW5hbHlzaXNFeHBsYW5hdGlvbgogICAgICAgICIiIgoKICAgICAgICAjIENyZWF0ZSB0aGUgUHJlc2lkaW8gQW5hbHlzaXNFeHBsYW5hdGlvbiBmb3IgdGhlIHJlc3VsdAogICAgICAgIGV4cGxhbmF0aW9uID0gcGEuQW5hbHlzaXNFeHBsYW5hdGlvbigKICAgICAgICAgICAgcmVjb2duaXplcj1zZWxmLl9fY2xhc3NfXy5fX25hbWVfXywKICAgICAgICAgICAgb3JpZ2luYWxfc2NvcmU9b3JpZ2luYWxfc2NvcmUsCiAgICAgICAgICAgIHRleHR1YWxfZXhwbGFuYXRpb249ZXhwbGFuYXRpb24sCiAgICAgICAgKQogICAgICAgIHJldHVybiBleHBsYW5hdGlvbgoKICAgICMgc2FuaXR5IGNoZWNrIG9mIHRoZSBlbnRpdHkgYW5kIGxhYmVsIGJlZm9yZSByZWNvZ25pdGlvbgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9fY2hlY2tfbGFiZWwoCiAgICAgICAgZW50aXR5OiBzdHIsIGxhYmVsOiBzdHIsIGNoZWNrX2xhYmVsX2dyb3VwczogVHVwbGVbU2V0LCBTZXRdCiAgICApIC0
    base_image: mlrun/mlrun
    commands:
    - python -m pip install nltk pandas presidio-anonymizer presidio-analyzer torch
      flair@git+https://github.com/flairNLP/flair.git@d4ed67bf663e4066517f00397412510d90043653
      st-annotated-text https://huggingface.co/beki/en_spacy_pii_distilbert/resolve/main/en_spacy_pii_distilbert-any-py3-none-any.whl
    code_origin: git@github.com-personal:pengwei715/functions.git#5468a7acb9b9fde12832e27daac2624f43746ee7:/Users/Peng_Wei/work/mlrun_related/functions/pii_recognizer/pii_recognizer.py
    origin_filename: /Users/Peng_Wei/work/mlrun_related/functions/pii_recognizer/pii_recognizer.py
    requirements: []
  entry_points:
    recognize_pii:
      name: recognize_pii
      doc: Walk through the input path, recognize PII in text and store the anonymized
        text in the output path. Generate the html with different colors for each
        entity, json report of the explaination.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun context. this is needed for log the artifacts.
        default: ''
      - name: input_path
        type: str
        doc: The input path of the text files needs to be analyzied.
        default: ''
      - name: output_path
        type: str
        doc: The output path to store the anonymized text.
        default: ''
      - name: output_suffix
        type: str
        doc: The surfix of output key for the anonymized text. for example if the
          input file is pii.txt, the output key is anoymized, the output file name
          will be pii_anonymized.txt.
        default: ''
      - name: html_key
        type: str
        doc: The html key for the artifact.
        default: ''
      - name: score_threshold
        type: float
        doc: The score threshold to mark the recognition as trusted.
        default: ''
      - name: entities
        type: List[str]
        doc: The list of entities to recognize.
        default: null
      - name: entity_operator_map
        type: dict
        doc: The map of entity to operator (mask, redact, replace, keep, hash, and
          its params)
        default: null
      - name: model
        type: str
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: null
      - name: generate_json
        type: bool
        doc: Whether to generate the json report of the explaination.
        default: true
      - name: generate_html
        type: bool
        doc: Whether to generate the html report of the explaination.
        default: true
      - name: is_full_text
        type: bool
        doc: Whether to return the full text or only the masked text.
        default: true
      - name: is_full_html
        type: bool
        doc: Whether to return the full html or just the annotated text
        default: true
      - name: is_full_report
        type: bool
        doc: Whether to return the full report or just the score and start, end index
        default: true
      outputs:
      - default: ''
        doc: 'A tuple of:'
      lineno: 850
  description: This function is used to recognize PII in a directory of text files
  default_handler: recognize_pii
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: ''
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false