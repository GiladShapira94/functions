kind: job
metadata:
  name: pii-recognizer
  tag: ''
  hash: 0972dbbfd83e86970a3655774ace0c074ea617ce
  project: llm-workflow-gilads
  labels:
    author: pgw
  categories:
  - machine-learning
  - data-preparation
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands:
    - python -m pip install nltk pandas presidio-anonymizer presidio-analyzer torch
      flair@git+https://github.com/flairNLP/flair.git@d4ed67bf663e4066517f00397412510d90043653
      st-annotated-text https://huggingface.co/beki/en_spacy_pii_distilbert/resolve/main/en_spacy_pii_distilbert-any-py3-none-any.whl
    code_origin: git@github.com-personal:pengwei715/functions.git#5468a7acb9b9fde12832e27daac2624f43746ee7:/Users/Peng_Wei/work/mlrun_related/functions/pii_recognizer/pii_recognizer.py
    origin_filename: /Users/Peng_Wei/work/mlrun_related/functions/pii_recognizer/pii_recognizer.py
    requirements: []
  entry_points:
    recognize_pii:
      name: recognize_pii
      doc: Walk through the input path, recognize PII in text and store the anonymized
        text in the output path. Generate the html with different colors for each
        entity, json report of the explaination.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun context. this is needed for log the artifacts.
        default: ''
      - name: input_path
        type: str
        doc: The input path of the text files needs to be analyzied.
        default: ''
      - name: output_path
        type: str
        doc: The output path to store the anonymized text.
        default: ''
      - name: output_suffix
        type: str
        doc: The surfix of output key for the anonymized text. for example if the
          input file is pii.txt, the output key is anoymized, the output file name
          will be pii_anonymized.txt.
        default: ''
      - name: html_key
        type: str
        doc: The html key for the artifact.
        default: ''
      - name: score_threshold
        type: float
        doc: The score threshold to mark the recognition as trusted.
        default: ''
      - name: entities
        type: List[str]
        doc: The list of entities to recognize.
        default: null
      - name: entity_operator_map
        type: dict
        doc: The map of entity to operator (mask, redact, replace, keep, hash, and
          its params)
        default: null
      - name: model
        type: str
        doc: The model to use. Can be "spacy", "flair", "pattern" or "whole".
        default: null
      - name: generate_json
        type: bool
        doc: Whether to generate the json report of the explaination.
        default: true
      - name: generate_html
        type: bool
        doc: Whether to generate the html report of the explaination.
        default: true
      - name: is_full_text
        type: bool
        doc: Whether to return the full text or only the masked text.
        default: true
      - name: is_full_html
        type: bool
        doc: Whether to return the full html or just the annotated text
        default: true
      - name: is_full_report
        type: bool
        doc: Whether to return the full report or just the score and start, end index
        default: true
      outputs:
      - default: ''
        doc: 'A tuple of:'
      lineno: 850
  description: This function is used to recognize PII in a directory of text files
  default_handler: recognize_pii
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  resources:
    requests:
      memory: 1Mi
      cpu: 25m
    limits:
      memory: 20Gi
      cpu: '2'
  priority_class_name: ''
  preemption_mode: prevent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app.iguazio.com/lifecycle
            operator: NotIn
            values:
            - preemptible
          - key: eks.amazonaws.com/capacityType
            operator: NotIn
            values:
            - SPOT
          - key: node-lifecycle
            operator: NotIn
            values:
            - spot
  tolerations: null
  security_context: {}
verbose: false